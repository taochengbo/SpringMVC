<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射--><!-- <mvc:annotation-driven /> -->
    <mvc:annotation-driven validator="validator" conversion-service="conversion-service" content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters>
	        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
	            <property name="supportedMediaTypes">
	                <list>
	                    <value>text/plain;charset=UTF-8</value>
	                    <value>text/html;charset=UTF-8</value>
	                </list>
	            </property>
	        </bean>
        </mvc:message-converters> 
    </mvc:annotation-driven>
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="validatemessageSource"/>
    </bean>
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
    <bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basename" value="classpath:message/validatemessages"/>  
        <property name="fileEncodings" value="utf-8"/>  
        <property name="cacheSeconds" value="120"/>  
	</bean> 
      
    <!-- 如果当前请求为"/"时，则转发到“/helloworld/index" -->
    <mvc:view-controller path="/" view-name="forward:/helloworld/index"/> 
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/" />
    <mvc:resources mapping="/css/**" location="/WEB-INF/css/" />
    <mvc:resources mapping="/fonts/**" location="/WEB-INF/fonts/" />
    <mvc:resources mapping="/plugins/**" location="/WEB-INF/plugins/" />
    <mvc:resources mapping="images/**" location="/WEB-INF/images/" />
    <!-- 当上面要访问的静态资源不包括在上面的配置中时，则根据此配置来访问 -->
    <mvc:default-servlet-handler/>

	<!-- 开启controller注解支持 -->
    <!-- use-default-filters="false" 只扫描指定的注解 -->
    <context:component-scan base-package="com.somnus"/>
    
    <!-- Total customization - see below for explanation. -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="favorPathExtension" value="true" />
	    <property name="favorParameter" value="false" />
	    <property name="parameterName" value="format" />
	    <property name="ignoreAcceptHeader" value="false"/>
	    <property name="useJaf" value="false"/>
	    <property name="defaultContentType" value="text/html" />
	
	    <property name="mediaTypes">
	        <map>
	            <entry key="json" value="application/json" />
	            <entry key="xml" value="application/xml" />
	       </map>
	    </property>
	</bean>
	
    <!-- 视图解析器 -->
    <!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
       <property name="contentType" value="text/html"/>        
       <property name="prefix" value="/WEB-INF/views/"/>
       <property name="suffix" value=".jsp"/>
    </bean> -->
    
	<mvc:view-resolvers>
	    <mvc:content-negotiation>
	        <mvc:default-views>
	            <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
	                <property name="jsonpParameterNames">
	                    <set>
	                        <value>jsonp</value>
	                        <value>callback</value>
	                    </set>
	                </property>
	                <!-- 不加配置返回 {"account":{"username":"admin","password":"123456"}}  加配置返回 {"username":"admin","password":"123456"}-->
	                <property name="extractValueFromSingleKeyModel" value="true" /> 
	            </bean>
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView"> 
                    <property name="marshaller"> 
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller"> 
                            <!-- 启用annotation -->  
                            <property name="autodetectAnnotations" value="true" />
                        </bean>
                    </property>
                </bean>
                <bean class="com.somnus.support.view.XlsView"/>
                <bean class="com.somnus.support.view.XlsxView"/>
	        </mvc:default-views>
	    </mvc:content-negotiation>
	    <mvc:jsp prefix="/WEB-INF/views/" suffix=".jsp" />
        <mvc:freemarker prefix="" suffix=".ftl" />
    </mvc:view-resolvers>
    
    <mvc:freemarker-configurer>
        <mvc:template-loader-path location="/WEB-INF/freemarker/" />
    </mvc:freemarker-configurer>
    
    <!-- 支持上传文件 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <!-- 设置上传文件的最大尺寸为1MB -->  
	    <property name="maxUploadSize">  
	        <value>1048576</value>  
	    </property>
	    <property name="defaultEncoding"> 
			<value>UTF-8</value> 
		</property>
    </bean>
    
    <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/databind/**"/>
    		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
        	<bean class="com.somnus.interceptor.AuthInterceptor"></bean>
    	</mvc:interceptor>
    	<mvc:interceptor>
    		<mvc:mapping path="/interceptor/**"/>
    		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
        	<bean class="com.somnus.interceptor.HandlerInterceptor1"></bean>
    	</mvc:interceptor>
    	<mvc:interceptor>
    		<mvc:mapping path="/interceptor/**"/>
    		<!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
        	<bean class="com.somnus.interceptor.HandlerInterceptor2"></bean>
    	</mvc:interceptor>
        <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 --> 
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />  
    </mvc:interceptors>
    
</beans>
